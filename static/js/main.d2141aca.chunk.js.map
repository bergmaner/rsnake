{"version":3,"sources":["Components/Snake.js","Components/Food.js","Components/Score.js","App.js","serviceWorker.js","index.js"],"names":["Snake","Fragment","this","props","snakeSquares","map","square","i","style","left","top","background","className","key","Component","Food","dot","Score","score","getRandomCoords","Math","floor","random","initialState","speed","food","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","squares","head","length","push","increaseSpeed","shift","setInterval","document","onkeydown","checkSnakeIsOutOfBorders","checkHeadIsOnSnake","gameOver","snake","pop","forEach","alert","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2141aca.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Snake extends Component\r\n{\r\n    render()\r\n    {\r\n    return(\r\n        <React.Fragment>\r\n            \r\n            {this.props.snakeSquares.map((square,i) =>\r\n            {\r\n                \r\n                const style = \r\n                {\r\n                    left:`${square[0]}%`,\r\n                    top:`${square[1]}%`,\r\n                    background:`rgba(0,0,${i*8},0.7)`\r\n                }\r\n                \r\n                return(\r\n                    <div className='snake-square'key={i} style={style}></div>\r\n                )\r\n    })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n}\r\nexport default Snake;\r\n","import React,{Component} from 'react';\r\n\r\nclass Food extends Component \r\n{\r\n render()\r\n {\r\n    const style = \r\n    {\r\n        left:`${this.props.dot[0]}%`,\r\n        top:`${this.props.dot[1]}%`\r\n    }      \r\n    return(\r\n        <div className='snake-food' style={style}></div>\r\n    )\r\n}\r\n}\r\n    export default Food;\r\n               \r\n              \r\n        \r\n    \r\n","import React, { Component } from 'react'\r\n\r\n class Score extends Component {\r\n    render() {\r\n        return (\r\n            <div className='score'>\r\n                {this.props.score}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Score\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Snake from './Components/Snake';\nimport Food from './Components/Food';\nimport Score from './Components/Score';\nconst getRandomCoords = () =>\n{\n  let min = 1;\n  let max = 92;\n  let x = Math.floor((Math.random() * (max - min + 1) + min)/4) * 4;\n  let y = Math.floor((Math.random() * (max - min + 1) + min)/4) * 4;\n  return[x,y];\n}\nconst initialState = \n{\n  speed:300,\n  score:0,\n  food : getRandomCoords() , \n  direction:'RIGHT' ,\n  snakeSquares :\n  [\n    [0,0],\n    [4,0],\n    [8,0],\n    [12,0]\n  ]\n}\nclass App extends Component {\n \n  state = initialState;\n  componentDidMount()\n  {\n    setInterval(this.moveSnake,this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n  componentDidUpdate()\n  {\n    this.checkSnakeIsOutOfBorders();\n    this.checkHeadIsOnSnake();\n  }\n  onKeyDown = (e) =>\n  {\n    e = e || window.event;\n    switch(e.keyCode)\n    {\n      case 38 : \n      this.setState({direction:'UP'});\n      break;\n      case 40 : \n      this.setState({direction:'DOWN'});\n      break;\n      case 37 : \n      this.setState({direction:'LEFT'});\n      break;\n      case 39 : \n      this.setState({direction:'RIGHT'});\n      break;\n    }\n  }\n  moveSnake = () =>\n  {\n    let squares = [...this.state.snakeSquares];\n    let head = squares[squares.length-1];\n    let food = this.state.food;\n    // 4 in suitable direction\n    switch(this.state.direction)\n    {\n        case'LEFT':\n        squares.push([head[0] - 4,head[1]]);\n        break;\n        case'RIGHT':\n        squares.push([head[0] + 4,head[1]]);\n        break;\n        case'UP':\n        squares.push([head[0],head[1] - 4]);\n        break;\n        case'DOWN':\n        squares.push([head[0],head[1] + 4]);\n        break;\n    }\n    if(head[0] === food[0] && head[1] === food[1])//check that snake eat mea;\n    {\n        this.increaseSpeed();\n        this.setState({food : getRandomCoords()});\n        this.setState({score : this.state.snakeSquares.length-3});\n        \n    }\n    else\n    {\n      squares.shift();// remove first element\n    }\n    \n    this.setState({snakeSquares : squares});//update state\n  }\n  increaseSpeed()\n  {\n    if(this.state.speed > 10)\n    {\n      this.setState({speed:this.state.speed - 10})\n    }\n  }\n  checkSnakeIsOutOfBorders()\n  {\n    let head = this.state.snakeSquares[this.state.snakeSquares.length-1];\n    if(head[0]<0 || head[0]>=96 || head[1]<0 || head[1]>=96)//check is it out of order\n    this.gameOver();\n  }\n  checkHeadIsOnSnake()\n  {\n    let snake = [...this.state.snakeSquares];\n    let head = snake[snake.length-1];\n    snake.pop();//remove head position from snake table\n    snake.forEach(square =>{\n      if(head[0]===square[0] && head[1] === square[1])//check head position with snake table\n      this.gameOver();\n    })\n  }\n  gameOver()\n  {\n    alert(`Game Over.Your score : ${this.state.score}`);\n    this.setState(initialState);\n  }\n \n  render(){\n  return (\n    <React.Fragment>\n       <Score score={this.state.score}/>\n    <div className=\"container\">\n      <div className='arena'>\n     <Snake snakeSquares={this.state.snakeSquares} />\n     <Food dot={this.state.food}/>\n    </div>\n    </div>\n    </React.Fragment>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}